#!/usr/bin/env python

import logging
import gspread
import json

import fcntl
import errno
import time

from urllib2 import urlopen
from oauth2client.service_account import ServiceAccountCredentials
from tenacity import *

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.ERROR)

def fetch_students():
    # We use a lock to handle students bleeping faster than we upload.
    # Many copies of this script can wait for the queue to be unlocked.
    # Note that the enqueuing script also waits for the same lock.
    with open("/var/dance/queue", "r") as queue:
        with open("/var/dance/queue.lock", "r") as lock:
            while True:
                try:
                    fcntl.flock(lock, fcntl.LOCK_EX | fcntl.LOCK_NB)
                    break
                except IOError as e:
                    if e.errno != errno.EAGAIN:
                        raise
                    else:
                        time.sleep(0.1)

            bleepings = []
            for line in queue:
                bleep = json.loads(line)
                bleepings.append([
                    bleep["Student ID"],
                    bleep["Student name"],
                    bleep["Minutes"],
                    bleep["Class name"],
                    bleep["Timestamp"],
                    bleep["Admin"]
                ])
            if bleepings:
                append_to_worksheet("Log", bleepings)
            with open("/var/dance/queue", "w"): pass
            fcntl.flock(queue, fcntl.LOCK_UN)

@retry(
    stop=stop_after_attempt(30),
    wait=wait_fixed(2),
    after=after_log(logger, logging.ERROR)
)
def append_to_worksheet(name, rows):
    scope = ["https://spreadsheets.google.com/feeds"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("/var/dance/secrets/google.json", scope)
    gc = gspread.authorize(creds)
    url = urlopen("http://brockman.se/riga-dance-school/students").geturl()
    sheet = gc.open_by_url(url).worksheet(name)
    records = sheet.get_all_records()
    if sheet.row_count < 1 + len(records) + len(rows):
        sheet.add_rows(len(rows))
    cells = sheet.range(
        len(records) + 2,
        1,
        len(records) + 2 + len(rows) - 1,
        6 # Number of columns in the log sheet
    )
    for i in range(0, len(cells)):
        cells[i].value = rows[cells[i].row - 2 - len(records)][cells[i].col - 1]
    sheet.update_cells(cells)

fetch_students()
